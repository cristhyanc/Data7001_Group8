View(projects)
library(readr)
library(sf)
library(cran)
library(maptools)
library(plotKML)
library(RCurl)
library(RJSONIO)
library(plyr)
projects <- read.csv("https://www.data.qld.gov.au/dataset/b518dada-3d2a-4d85-bd2c-febe197863c7/resource/410fb21f-8c5a-43a1-8b57-a74a3329d1d0/download/ops-open-data.csv")
View(projects)
class(projects)
View(projects)
colnames(projects)
projects(,'ï..Project.Title')
projects[,'ï..Project.Title']
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
print(projectName)
}
projects[1,'ï..Project.Title']
strsplit(projects[1,'ï..Project.Title'],',')
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projects[row,'ï..Project.Title'],',')
address=splitName[1] + splitName[2]
print(address)
}
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projects[row,'ï..Project.Title'],',')
address=splitName[1] + '' + splitName[2]
print(address)
}
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projects[row,'ï..Project.Title'],',')
address=paste(splitName[1],splitName[2])
print(address)
}
strsplit(projects[1,'ï..Project.Title'],',')
class(strsplit)
dd=strsplit(projects[1,'ï..Project.Title'],',')
class(dd)
dd[1]
dd[[1]]
class(dd[[1]])
dd[[2]]
dd[[1]]
dd[[[1]]]
?strsplit
dd[[1]]
dd[[1]][1]
class(dd[[1]])
typeof(dd[[1]])
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projects[row,'ï..Project.Title'],',')
address=paste(dd[[1]][1],dd[[1]][2])
print(address)
}
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projectName,',')
address=paste(dd[[1]][1],',',dd[[1]][2],'QLD, Australia')
print(address)
}
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projectName,',')
address=paste(splitName[[1]][1],',',splitName[[1]][2],'QLD, Australia')
print(address)
}
projects$latitude=0
View(projects)
projects$longitude=0
library(ggmap)
results <-geocode(c("Townsville, Cnr Nathan and Charles Street Aikenvale, QLD, Australia"), output = "all")
#install.packages("ggmap")
library(ggmap)
register_google(key = "AIzaSyCl59PwFo92ZjZg7luMtB_NVXE5pA4SfUo")
results <-geocode(c("Townsville, Cnr Nathan and Charles Street Aikenvale, QLD, Australia"), output = "all")
results
results$status
if (results$status="OK")
if (results$status=="OK")
{
print('sii')
}
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projectName,',')
address=paste(splitName[[1]][1],',',splitName[[1]][2],'QLD, Australia')
googleResult <-geocode(c(address), output = "all")
if (googleResult$status=="OK")
{
projects[row,'latitude']= googleResult[[1]][[1]]$geometry$location$lat
projects[row,'longitude']= googleResult[[1]][[1]]$geometry$location$lng
}
}
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projectName,',')
address=paste(splitName[[1]][1],',',splitName[[1]][2],'QLD, Australia')
print(address)
googleResult <-geocode(c(address), output = "all")
if (googleResult$status=="OK")
{
projects[row,'latitude']= googleResult[[1]][[1]]$geometry$location$lat
projects[row,'longitude']= googleResult[[1]][[1]]$geometry$location$lng
}
}
googleResult
results <-geocode(c("Palmview ,  New State Primary & Special School QLD, Australia"), output = "all")
results
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
results
result <- try({
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
}, silent = FALSE)
result <- try({
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
}, silent = TRUE)
result <- try({
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
if (googleResult$status=="OK")
{
}
}, silent = TRUE)
result
class(results)
result <- try({
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
if("status" %in% colnames(dat))
{
cat("Yep, it's in there!\n");
}
}, silent = TRUE)
result
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
if("status" %in% colnames(dat))
{
cat("Yep, it's in there!\n");
}
class(results)
typeof(results)
results <-geocode(c("New State Primary & Special School QLD, Australia"), output = "all")
class(results)
typeof(results)
if(is.list(results))
{
cat("Yep, it's in there!\n");
}
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
if(is.list(results))
{
cat("Yep, it's in there!\n");
}
typeof(results)
class(results)
results
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
results <-geocode(c("New State Primary & Special School QLD, Australia"), output = "all")
class(results)
typeof(results)
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
class(results)
typeof(results)
results <-geocode(c("New State Primary & Special School QLD, Australia"), output = "all")
results
class(results)
typeof(results)
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
results
class(results)
typeof(results)
if(is.data.frame(results))
{
cat("Yep, it's in there!\n");
}
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
if(is.data.frame(results))
{
cat("Yep, it's in there!\n");
}
if(!is.data.frame(results))
{
cat("Yep, it's in there!\n");
}
if("d" %in% colnames(results))
{
cat("Yep, it's in there!\n");
}
if("status" %in% colnames(results))
{
cat("Yep, it's in there!\n");
}
results <-geocode(c("New State Primary & Special School QLD, Australia"), output = "all")
if("status" %in% colnames(results))
{
cat("Yep, it's in there!\n");
}
results
colnames(results)
results
colnames(results)
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
?geocode
out <- tryCatch(
{
# Just to highlight: if you want to use more than one
# R expression in the "try" part then you'll have to
# use curly brackets.
# 'tryCatch()' will return the last evaluated expression
# in case the "try" part was completed successfully
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
# The return value of `readLines()` is the actual value
# that will be returned in case there is no condition
# (e.g. warning or error).
# You don't need to state the return value via `return()` as code
# in the "try" part is not wrapped insided a function (unlike that
# for the condition handlers for warnings and error below)
},
error=function(cond) {
message(paste("URL does not seem to exist:", url))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(paste("URL caused a warning:", url))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("Processed URL:", url))
message("Some other message at the end")
}
)
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projectName,',')
address=paste(splitName[[1]][1],',',splitName[[1]][2],'QLD, Australia')
print(address)
out <- tryCatch(
{
googleResult <-geocode(c(address), output = "all")
if (googleResult$status=="OK")
{
projects[row,'latitude']= googleResult[[1]][[1]]$geometry$location$lat
projects[row,'longitude']= googleResult[[1]][[1]]$geometry$location$lng
}
},
error=function(cond) {
message(paste("URL does not seem to exist:", url))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(paste("URL caused a warning:", url))
message("Here's the original warning message:")
message(address)
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("Processed URL:", url))
message("Some other message at the end")
}
)
}
out <- tryCatch(
{
results <-geocode(c("Palmview,  New State Primary & Special School QLD, Australia"), output = "all")
},
error=function(cond) {
message(paste("URL does not seem to exist:", url))
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message(paste("URL caused a warning:", url))
message("Here's the original warning message:")
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message(paste("Processed URL:", url))
message("Some other message at the end")
}
)
for (row in 1:nrow(projects)) {
projectName=projects[row,'ï..Project.Title']
splitName=strsplit(projectName,',')
address=paste(splitName[[1]][1],',',splitName[[1]][2],'QLD, Australia')
print(address)
out <- tryCatch(
{
googleResult <-geocode(c(address), output = "all")
if (googleResult$status=="OK")
{
projects[row,'latitude']= googleResult[[1]][[1]]$geometry$location$lat
projects[row,'longitude']= googleResult[[1]][[1]]$geometry$location$lng
}
},
error=function(cond) {
message("URL does not seem to exist:")
message("Here's the original error message:")
message(cond)
# Choose a return value in case of error
return(NA)
},
warning=function(cond) {
message("URL caused a warning:")
message("Here's the original warning message:")
message(address)
message(cond)
# Choose a return value in case of warning
return(NULL)
},
finally={
# NOTE:
# Here goes everything that should be executed at the end,
# regardless of success or error.
# If you want more than one expression to be executed, then you
# need to wrap them in curly brackets ({...}); otherwise you could
# just have written 'finally=<expression>'
message("Processed URL:")
message("Some other message at the end")
}
)
}
View(projects)

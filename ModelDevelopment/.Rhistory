ifelse(sum(Safety)=1, 0, sum(Safety))))
partydf_notALP <- partydf_notALP %>%
group_by(Electorate) %>%
mutate(ALP_Safety_Ranking = ifelse(sum(Safety)>5, 5,
ifelse(sum(Safety)==1, 0, sum(Safety))))
View(partydf_notALP)
View(partydf_notALP)
partydf_notALP <- partydf_notALP %>%
filter(Safety!=0 & ALP_Safety_Ranking!=0)
View(partydf_notALP)
partydf_notALP <- partydf_notALP %>%
filter(Safety!=0 & ALP_Safety_Ranking!=0 & Margin ==0)
View(partydf_notALP)
View(partydf_isALP)
View(partydf)
partydf_notALP <- partydf%>%
filter(isALP==0) %>%
group_by(Electorate) %>%
mutate(Safety = ifelse(Party=='ALP', 0,
ifelse(Margin>0.1, 5,
ifelse(Margin<=0.1 & Margin >0.06, 4,
ifelse(Margin == 0, 1,
ifelse(Margin<=0.06, 3, NA))))))
partydf_notALP <- partydf_notALP %>%
group_by(Electorate) %>%
mutate(ALP_Safety_Ranking = ifelse(sum(Safety)>5, 5,
ifelse(sum(Safety)==1, 0, sum(Safety))))
partydf_notALP <- partydf_notALP %>%
filter(Safety!=0 & ALP_Safety_Ranking!=0)
partydf_notALP <- partydf%>%
filter(isALP==0) %>%
group_by(Electorate) %>%
mutate(Safety = ifelse(Party=='ALP', 0,
ifelse(Margin>0.1, 5,
ifelse(Margin<=0.1 & Margin >0.06, 4,
ifelse(Margin == 0, 1,
ifelse(Margin<=0.06, 3, NA))))))
partydf_notALP <- partydf_notALP %>%
group_by(Electorate) %>%
mutate(ALP_Safety_Ranking = ifelse(sum(Safety)>5, 5,
ifelse(sum(Safety)==1, 0, sum(Safety))))
partydf_notALP <- partydf_notALP %>%
filter(Margin==0)
partydf_notALP <- partydf%>%
filter(isALP==0) %>%
group_by(Electorate) %>%
mutate(Safety = ifelse(Party=='ALP', 0,
ifelse(Margin>0.1, 5,
ifelse(Margin<=0.1 & Margin >0.06, 4,
ifelse(Margin == 0, 1,
ifelse(Margin<=0.06, 3, NA))))))
partydf_notALP <- partydf_notALP %>%
group_by(Electorate) %>%
mutate(ALP_Safety_Ranking = ifelse(sum(Safety)>5, 5,
ifelse(sum(Safety)==1, 0, sum(Safety))))
partydf_notALP <- partydf_notALP %>%
filter(Margin==0)
partydf_notALP <- partydf%>%
filter(isALP==0) %>%
group_by(Electorate) %>%
mutate(Safety = ifelse(Party=='ALP', 0,
ifelse(Margin>0.1, 5,
ifelse(Margin<=0.1 & Margin >0.06, 4,
ifelse(Margin == 0, 1,
ifelse(Margin<=0.06, 3, NA))))))
partydf_notALP <- partydf_notALP %>%
group_by(Electorate) %>%
mutate(ALP_Safety_Ranking = ifelse(sum(Safety)>5, 5,
ifelse(sum(Safety)==1, 0, sum(Safety))))
partydf_notALP <- partydf_notALP %>%
filter(Margin!=0)
View(partydf_isALP)
partydf_isALP <- partydf %>%
filter(isALP==1) %>%
mutate(Safety = ifelse(Margin>0.1, 0,
ifelse((Margin>0.06 & Margin<=0.1), 1, 2))) %>%
mutate(ALP_Safety_Ranking = Safety)
# Election data with isALP and ALP_Safety_Ranking
newpartydf <- rbind(partydf_isALP, partydf_notALP)
View(newpartydf)
newpartydf <- newpartydf[,-c(1,3,4,5,8)]
View(newpartydf)
combined <- merge(census, newpartydf, projectSum)
combined <- cbind(census, newpartydf, projectSum)
combined <- merge(merge(census, newpartydf), projectSum)
View(combined)
View(combined)
combined <- merge(merge(census, newpartydf, all = TRUE), projectSum, all=TRUE)
View(combined)
View(newpartydf)
newpartydf$Electorate <- toupper(newpartydf$Electorate)
View(newpartydf)
combined <- merge(merge(census, newpartydf, all = F), projectSum, all=F)
View(combined)
write.csv(combined, 'combined3.csv')
data <- combined
data$logCost <- log(data$TotalEstimatedCost)
attach(data)
# EDA
xyplot(logCost~Enrolment)
xyplot(logCost~Tot_Population)
xyplot(logCost~Working_Age) # Potential
xyplot(logCost~Retired)
xyplot(logCost~Under_Age)
xyplot(logCost~log(Median_rent_weekly))
xyplot(logCost~log(Median_tot_fam_inc_weekly)) # Potential
xyplot(logCost~Tot_P_Need_for_Asstn)
xyplot(logCost~Ave_Motor_Vehicle_per_Dwelling)
xyplot(logCost~Full_time_Employ) # Potential
xyplot(logCost~Unemploy)
xyplot(logCost~isALP)
xyplot(logCost~ALP_Safety_Ranking)
# Linear with logarithmic transformation of Y
lm.model <- lm(logCost~(Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking))
summary(lm.model)
?glm
# GLM with gamma function
gamma.model <- glm(logCost~Working_Age+isALP+ALP_Safety_Ranking, family = binomial)
# GLM with gamma function
gamma.model <- glm(logCost~Working_Age+isALP+ALP_Safety_Ranking, family = gamma)
# GLM with gamma function
gamma.model <- glm(logCost~Working_Age+isALP+ALP_Safety_Ranking, family = gaussian())
summary(gamma.model)
# Linear with logarithmic transformation of Y
lm.model <- lm(logCost~(Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking))
summary(lm.model)
# Linear with logarithmic transformation of Y
lm.model <- lm(logCost~(Working_Age+isALP+ALP_Safety_Ranking))
summary(lm.model)
# Linear with logarithmic transformation of Y
lm.model <- lm(logCost~Working_Age+isALP)
summary(lm.model)
# Linear with logarithmic transformation of Y
lm.model <- lm(logCost~Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking)
summary(lm.model)
View(combined)
vif(lm.model)
library(car)
vif(lm.model)
mod.resid <- resid(lm.model)
qqplot(mod.resid)
qqnorm(mod.resid)
qqline(mod.resid)
plot(x=fitted(lm.model), y=mod.resid, main = "Residual vs Fitted Plot",
xlab = "Fitted Values", ylab = "Residual")
abline(0,0,col="red")
spreadLevelPlot(lm.model, main = "Spread-Level Plot for Multiple Regression")
plot(mod.resid)
abline(0,0,col="red")
ncvTest(lm.model)
gvlma.lm <- glvma(lm.model)
library(gvlma)
gvlma.lm <- glvma(lm.model)
gvlma.lm <- gvlma(lm.model)
summary(gvlma.lm)
View(combined)
# EDA
boxplot(TotalEstimatedCost)
boxplot(logCost)
hist(logCost, freq = F)
hist(logCost, freq = F, density = T)
hist(logCost, freq = F, density = F)
plot(density(logC))
plot(density(logCost))
plot(density(logCost), add=T)
hist(logCost, freq = F)
plot(density(logCost), add=T)
hist(logCost, freq = F, add=T)
plot(density(logCost))
hist(logCost, freq = F, add=T)
hist(logCost, freq = F)
density.logCost <- density(logCost)
hist(logCost, freq = F)
plot(density.logCost, add=T)
plot(density(logCost))
warnings()
boxplot(logCost)
plot(density(logCost))
hist(logCost, freq = F, add=T)
plot(density(logCost), col='red')
hist(logCost, freq = F, add=T)
#################
comb <- merge(census, newpartydf)
#################
comb <- merge(census, newpartydf, all=F)
View(comb)
View(census)
View(newpartydf)
View(census)
library(readr)
library(dplyr)
Census2 <- read_csv("Census2.csv")
Census2$Electorate[Census2$Electorate=="Ashgrove"]="Cooper"
Census2$Electorate[Census2$Electorate=="Dalrymple"]="Hill"
Census2$Electorate[Census2$Electorate=="Kallangur"]="Kurwongbah"
Census2$Electorate[Census2$Electorate=="Mount Coot-tha"]="Maiwar"
Census2$Electorate[Census2$Electorate=="Yeerongpilly"]="Miller"
Census2$Electorate[Census2$Electorate=="Brisbane Central"]="McConnel"
Census2$Electorate[Census2$Electorate=="Cleveland"]="Oodgeroo"
Census2$Electorate[Census2$Electorate=="Beaudesert"]="Scenic Rim"
Census2$Electorate[Census2$Electorate=="Albert"]="Theodore"
Census2$Electorate[Census2$Electorate=="Sunnybank"]="Toohey"
Census2$Electorate[Census2$Electorate=="Mount Isa"]="Traeger"
bonney <- rbind.data.frame(Census2[Census2[,1]=='Southport',],
Census2[Census2[,1]=='Broadwater',])
bonney_data <- c('Bonney', apply(bonney[,-c(1)], 2, mean))
bancroft <- rbind.data.frame(Census2[Census2[,1]=='Murrumba',],
Census2[Census2[,1]=='Kurwongbah',],
Census2[Census2[,1]=='Morayfield',],
Census2[Census2[,1]=='Pumicestone',])
bancroft_data <- c('Bancroft', apply(bancroft[,-c(1)], 2, mean))
jordan <- rbind.data.frame(Census2[Census2[,1]=='Bundamba',],
Census2[Census2[,1]=='Inala',],
Census2[Census2[,1]=='Algester',],
Census2[Census2[,1]=='Lockyer',],
Census2[Census2[,1]=='Logan',])
jordan_data <- c('Jordan', apply(jordan[,-c(1)], 2, mean))
macalister <- rbind.data.frame(Census2[Census2[,1]=='Waterford',],
Census2[Census2[,1]=='Coomera',],
Census2[Census2[,1]=='Redlands',])
macalister_data <- c('Macalister', apply(macalister[,-c(1)], 2, mean))
Census2 <- read_csv("Census2.csv")
Census2$Electorate[Census2$Electorate=="Ashgrove"]="Cooper"
Census2$Electorate[Census2$Electorate=="Dalrymple"]="Hill"
Census2$Electorate[Census2$Electorate=="Kallangur"]="Kurwongbah"
Census2$Electorate[Census2$Electorate=="Mount Coot-tha"]="Maiwar"
Census2$Electorate[Census2$Electorate=="Brisbane Central"]="McConnel"
Census2$Electorate[Census2$Electorate=="Cleveland"]="Oodgeroo"
Census2$Electorate[Census2$Electorate=="Beaudesert"]="Scenic Rim"
Census2$Electorate[Census2$Electorate=="Albert"]="Theodore"
Census2$Electorate[Census2$Electorate=="Sunnybank"]="Toohey"
Census2$Electorate[Census2$Electorate=="Mount Isa"]="Traeger"
bonney <- rbind.data.frame(Census2[Census2[,1]=='Southport',],
Census2[Census2[,1]=='Broadwater',])
bonney_data <- c('Bonney', apply(bonney[,-c(1)], 2, mean))
bancroft <- rbind.data.frame(Census2[Census2[,1]=='Murrumba',],
Census2[Census2[,1]=='Kurwongbah',],
Census2[Census2[,1]=='Morayfield',],
Census2[Census2[,1]=='Pumicestone',])
bancroft_data <- c('Bancroft', apply(bancroft[,-c(1)], 2, mean))
jordan <- rbind.data.frame(Census2[Census2[,1]=='Bundamba',],
Census2[Census2[,1]=='Inala',],
Census2[Census2[,1]=='Algester',],
Census2[Census2[,1]=='Lockyer',],
Census2[Census2[,1]=='Logan',])
jordan_data <- c('Jordan', apply(jordan[,-c(1)], 2, mean))
macalister <- rbind.data.frame(Census2[Census2[,1]=='Waterford',],
Census2[Census2[,1]=='Coomera',],
Census2[Census2[,1]=='Redlands',])
macalister_data <- c('Macalister', apply(macalister[,-c(1)], 2, mean))
miller <- rbind.data.frame(Census2[Census2[,1]=='Indooroopilly',],
Census2[Census2[,1]=='Yeerongpilly',])
miller_data <- c('Miller', apply(macalister[,-c(1)], 2, mean))
ninderry <- rbind.data.frame(Census2[Census2[,1]=='Noosa',],
Census2[Census2[,1]=='Nicklin',],
Census2[Census2[,1]=='Buderim',],
Census2[Census2[,1]=='Maroochydore',])
ninderry_data <- c('Ninderry', apply(jordan[,-c(1)], 2, mean))
Census2 <- rbind(Census2, bonney_data, bancroft_data, jordan_data, macalister_data, miller_data, ninderry_data)
Census2 <- Census2 %>%
filter(Census2[,1]!="Indooroopilly" & Census2[,1]!="Yeerongpilly")
View(Census2)
Census2 <- mutate_all(Census2, .funs=toupper)
Electorate_enrolment <- read.csv('ELECTORATE ENROLMENT 2016.csv')
Electorate_enrolment <- Electorate_enrolment[,1:2]
Census2 <- cbind(Census2, Electorate_enrolment)
Census2 <- Census2[,-c(50)]
write.csv(Census2, 'Census_3_Corrected SED.csv')
write.csv(Census2, 'Census_3_Corrected SED.csv')
# Census data
census <- read.csv("Census_3_Corrected SED.csv", header = TRUE)
census <- census[,-1]
combined <- merge(merge(census, newpartydf, all = F), projectSum, all=F)
write.csv(combined, 'combined3.csv')
data <- combined
data$logCost <- log(data$TotalEstimatedCost)
attach(data)
# Linear with logarithmic transformation of Y
lm.model <- lm(logCost~Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking)
summary(lm.model)
vif(lm.model)
mod.resid <- resid(lm.model)
qqnorm(mod.resid)
qqline(mod.resid)
qqline(mod.resid, col='red')
plot(x=fitted(lm.model), y=mod.resid, main = "Residual vs Fitted Plot",
xlab = "Fitted Values", ylab = "Residual")
abline(0,0,col="red")
plot(mod.resid)
abline(0,0,col="red")
ncvTest(lm.model)
gvlma.lm <- gvlma(lm.model)
summary(gvlma.lm)
#################
comb <- merge(census, newpartydf, all=F)
combined2 <- merge(comb, projectSum, all=T)
combined2[is.na(combined2)] <- 0
View(combined2)
# EDA
boxplot(TotalEstimatedCost)
plot(density(TotalEstimatedCost))
plot(density(logCost), col='red')
hist(TotalEstimatedCost, freq = F)
attach(data)
View(data)
#Linear model:
model1 <- lm(logCost~*)
# Linear with logarithmic transformation of Y
lm.model <- lm(logCost~Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking)
summary(lm.model)
vif(lm.model)
mod.resid <- resid(lm.model)
qqnorm(mod.resid)
qqline(mod.resid, col='red')
plot(x=fitted(lm.model), y=mod.resid, main = "Residual vs Fitted Plot",
xlab = "Fitted Values", ylab = "Residual")
abline(0,0,col="red")
plot(mod.resid)
abline(0,0,col="red")
ncvTest(lm.model)
gvlma.lm <- gvlma(lm.model)
#Linear model:
model1 <- lm(logCost~*)
#Linear model:
model1 <- lm(logCost~.)
#Linear model:
model1 <- glm(logCost~.)
#Linear model:
model1 <- glm(logCost~., data = data)
summary(model1)
model1 <- glm(logCost~., data = df_new)
#Linear model:
df_new <- data[,-c(1,54)]
model1 <- glm(logCost~., data = df_new)
summary(model1)
xyplot(logCost~Margin)
# Linear with logarithmic transformation of Y
lm.model <- lm(logCost~Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking+Margin)
summary(lm.model)
model2 <- lm(logCost~Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking+Margin)
summary(model2)
vif(model2)
mod.resid <- resid(model2)
qqnorm(mod.resid)
qqline(mod.resid, col='red')
plot(x=fitted(model2), y=mod.resid, main = "Residual vs Fitted Plot",
xlab = "Fitted Values", ylab = "Residual")
abline(0,0,col="red")
plot(mod.resid)
abline(0,0,col="red")
ncvTest(model2)
gvlma.lm <- gvlma(model2)
summary(gvlma.lm)
vif(model2)
summary(model2)
# Linear with logarithmic transformation of Y
model2 <- lm(logCost~Working_Age+isALP+Margin)
summary(model2)
# Linear with logarithmic transformation of Y
model2 <- lm(logCost~Working_Age+Full_time_Employ+isALP+ALP_Safety_Ranking+Margin)
summary(model2)
+log(Median_tot_fam_inc_weekly)
# Linear with logarithmic transformation of Y
model2 <- lm(logCost~Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking+Margin)
summary(model2)
mod.resid <- resid(model2)
qqnorm(mod.resid)
qqline(mod.resid, col='red')
plot(x=fitted(model2), y=mod.resid, main = "Residual vs Fitted Plot",
xlab = "Fitted Values", ylab = "Residual")
abline(0,0,col="red")
qqnorm(mod.resid)
qqline(mod.resid, col='red')
plot(x=fitted(model2), y=mod.resid, main = "Residual vs Fitted Plot",
xlab = "Fitted Values", ylab = "Residual")
abline(0,0,col="red")
plot(mod.resid)
abline(0,0,col="red")
plot(x=fitted(model2), y=data$logCost, main = "Fitted vs Actual Plot",
xlab = "Fitted Values", ylab = "Actual")
abline(0,1,col="red")
summary(model2)
plot(mod.resid, ylab = "Residual")
abline(0,0,col="red")
source('~/GitHub/Data7001_Group8/ModelDevelopment/EDA2.R')
summary(model2)
model3 <- lm(logCost~Working_Age*log(Median_tot_fam_inc_weekly)*Full_time_Employ*isALP*ALP_Safety_Ranking*Margin)
summary(model3)
ncvTest(model2)
gvlma.lm <- gvlma(model2)
summary(gvlma.lm)
library(tidyverse)
library(readr)
library(readxl)
setwd("D:/Technical document/Master of data science/Sem 2 2020/Intro to Data Science DATA7001/2016 Census GCP State Electoral Divisions for QLD/Data")
SEDdf <- read_excel("SED CODES to NAMES.xlsx")
SED_NAME <- SEDdf$Census_Name_2016
# Demographic data
df1 <- read.csv('2016Census_G01_QLD_SED.csv')
df1 <- df1[,-grep("_M", colnames(df1))]
df1 <- df1[,-grep("_F", colnames(df1))]
df1 <- df1[,-c(14:37)]
df1$Under_Age <- rowSums(df1[, c(3:5)])/df1$Tot_P_P # Proportion of ppl age 0-19
df1$Working_Age <- rowSums(df1[, c(6:10)])/df1$Tot_P_P # Proportion of ppl age 20-64
source('~/GitHub/Data7001_Group8/ModelDevelopment/EDA2.R')
source('~/GitHub/Data7001_Group8/ModelDevelopment/EDA2.R')
setwd("~/GitHub/Data7001_Group8/ModelDevelopment")
library(Hmisc)
library(tidyverse)
library(dplyr)
library(car)
library(gvlma)
# Census data
census <- read.csv("Census_3_Corrected SED.csv", header = TRUE)
census <- census[,-1]
# Project cost data
project <- read.csv('projectscsv.csv', header = T)
projectSum <- project %>%
group_by(Electorate) %>%
summarise(TotalEstimatedCost=sum(TotalEstimatedCost))
projectSum <- projectSum[-78,]
projectSum$Electorate <- toupper(projectSum$Electorate)
# Election result data
party <- read.csv("election_results_two_preferred.csv", header = F)
party <- party[party[1]==2017,]
party <- party[party[3]!="Total" & party[3]!='Exhausted',]
partydf <- party %>%
group_by(V2) %>%
mutate(Voteperc=V4/sum(V4))
colnames(partydf) <- c('Year', 'Electorate', 'Party', 'Votes', 'VotePerc')
# Identify if ALP won the electorate
partydf <- partydf %>%
group_by(Electorate) %>%
mutate(Margin=VotePerc-min(VotePerc)) %>%
mutate(isALP = ifelse(Margin>0 & Party=='ALP',1,0))
partydf_isALP <- partydf %>%
filter(isALP==1) %>%
mutate(Safety = ifelse(Margin>0.1, 0,
ifelse((Margin>0.06 & Margin<=0.1), 1, 2))) %>%
mutate(ALP_Safety_Ranking = Safety)
partydf_notALP <- partydf%>%
filter(isALP==0) %>%
group_by(Electorate) %>%
mutate(Safety = ifelse(Party=='ALP', 0,
ifelse(Margin>0.1, 5,
ifelse(Margin<=0.1 & Margin >0.06, 4,
ifelse(Margin == 0, 1,
ifelse(Margin<=0.06, 3, NA))))))
partydf_notALP <- partydf_notALP %>%
group_by(Electorate) %>%
mutate(ALP_Safety_Ranking = ifelse(sum(Safety)>5, 5,
ifelse(sum(Safety)==1, 0, sum(Safety))))
partydf_notALP <- partydf_notALP %>%
filter(Margin!=0)
# Election data with isALP and ALP_Safety_Ranking
newpartydf <- rbind(partydf_isALP, partydf_notALP)
newpartydf <- newpartydf[,-c(1,3,4,5,8)]
newpartydf$Electorate <- toupper(newpartydf$Electorate)
combined <- merge(merge(census, newpartydf, all = F), projectSum, all=F)
write.csv(combined, 'combined3.csv')
data <- combined
data$logCost <- log(data$TotalEstimatedCost)
attach(data)
# EDA
boxplot(TotalEstimatedCost)
hist(TotalEstimatedCost, freq = F)
boxplot(logCost)
plot(density(logCost), col='red')
hist(logCost, freq = F, add=T)
xyplot(logCost~Enrolment)
xyplot(logCost~Tot_Population)
xyplot(logCost~Working_Age) # Potential
xyplot(logCost~Retired)
xyplot(logCost~Under_Age)
xyplot(logCost~log(Median_rent_weekly))
xyplot(logCost~log(Median_tot_fam_inc_weekly)) # Potential
xyplot(logCost~Tot_P_Need_for_Asstn)
xyplot(logCost~Ave_Motor_Vehicle_per_Dwelling)
xyplot(logCost~Full_time_Employ) # Potential
xyplot(logCost~Unemploy)
xyplot(logCost~isALP) # Good relationship
xyplot(logCost~ALP_Safety_Ranking) # Potential negative relationship
xyplot(logCost~Margin)
#Linear model:
df_new <- data[,-c(1,54)]
model1 <- glm(logCost~., data = df_new)
summary(model1)
# Linear with logarithmic transformation of Y
model2 <- lm(logCost~Working_Age+log(Median_tot_fam_inc_weekly)+Full_time_Employ+isALP+ALP_Safety_Ranking+Margin)
summary(model2)
mod.resid <- resid(model2)
qqnorm(mod.resid)
qqline(mod.resid, col='red')
plot(x=fitted(model2), y=mod.resid, main = "Residual vs Fitted Plot",
xlab = "Fitted Values", ylab = "Residual")
abline(0,0,col="red")
plot(x=fitted(model2), y=data$logCost, main = "Fitted vs Actual Plot",
xlab = "Fitted Values", ylab = "Actual")
abline(0,1,col="red")
plot(mod.resid, ylab = "Residual")
abline(0,0,col="red")
gvlma.lm <- gvlma(model2)
summary(gvlma.lm)
vif
# GLM with gamma function
gamma.model <- glm(logCost~Working_Age+isALP+ALP_Safety_Ranking, family = gaussian())
summary(gamma.model)
summary(gvlma.lm)
spreadLevelPlot(model2, main = "Spread-Level Plot for Multiple Regression")
hist(mod.resid)
plot(model2)
plot(model2)
